### Часть **1**

Напишите сервис по управлению задачами по типу ежедневника.

В ежедневник можно:
- заносить задачи,
- удалять задачи,
- получать список задач на предстоящий день.

Каждая задача обязательно имеет:
- заголовок,
- поле для описания,
- тип задачи (**личные** или **рабочие**),
- признак повторяемости.

Повторяемость пользователь должен выбирать из списка с **пятью вариантами значений:**
- однократная,
- ежедневная,
- еженедельная,
- ежемесячная,
- ежегодная.♦

У каждого варианта повторяемости есть **метод для получения следующей даты и времени выполнения.**
Все эти поля (заголовок, описание, тип и повторяемость) в задачах должны заполняться **обязательно.**
Помимо этого, каждой задаче должны быть автоматически присвоены **дата и время создания.** Для более гибкого управления
задачами рекомендуется завести поле **id**, которое заполняет генератор.

Что использовать при создании сервиса:
- Все задачи должны храниться в **коллекции**, тип которой нужно выбрать самостоятельно как самый оптимальный для работы.
- Организацию работы с задачами необходимо сделать в виде **отдельного класса-сервиса,** который будет хранить коллекцию
    задач и методы по работе с этими задачами.
- Управление задачами осуществляется через консоль и класс **Scanner**.

### Критерии проверки одним списком
- Ввод данных осуществляется через консоль. Вы можете либо использовать класс Scanner, либо задать его явно через переменные.
- Каждой задаче присвоен **id**.
- Можно выбрать тип задачи: **личная** или **рабочая**.
- Реализована функция повторяемости задачи. Для выбора доступно 5 значений.
- Обработаны ошибки при вводе некорректных данных.
- В сервисе добавлены методы:
    - «Добавить задачу»,
    - «Получить задачи на день»,
    - «Удалить задачу по id».

В результате должно получиться приложение, в которое можно заносить новые задачи через консоль или через переменные,
удалять задачи и получать список всех задач на день с помощью методов. Обратите внимание, что все операции с задачами
должны осуществляться через меню.